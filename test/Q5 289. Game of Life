#Q5 289. Game of Life
# According to Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

# The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

# Any live cell with fewer than two live neighbors dies as if caused by under-population.
# Any live cell with two or three live neighbors lives on to the next generation.
# Any live cell with more than three live neighbors dies, as if by over-population.
# Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
# The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.

 

# Example 1:


# Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
# Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
# Example 2:


# Input: board = [[1,1],[1,0]]
# Output: [[1,1],[1,1]]
 

# Constraints:

# m == board.length
# n == board[i].length
# 1 <= m, n <= 25
# board[i][j] is 0 or 1.
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        #new_board = [[0 for ij in range(len(board[0]))] for ix in range(len(board))]
       
        # ix, iy = (1, 1), (1, -1), (-1, 1), (-1, -1)
        directions = [(1,0),(1,1),(1,-1),(0,-1),(0,1),(-1,0),(-1,1),(-1,-1)]

        for i in range(len(board)):
            for j in range(len(board[0])):
                count = 0
                for x, y in directions:
                    if i + x < len(board) and i + x >= 0 and j + y >= 0 and j + y < len(board[0]) and abs(board[i + x][y + j]) == 1:
                        count += 1
                if board[i][j] == 0 and count == 3:
                    board[i][j] = 2
                elif board[i][j] == 1 and (count < 2 or count > 3):
                    board[i][j] = -1
                # elif board[i][j] == 1 and (count == 2 or count == 3):
                #     new_board[i][j] = 1
        for i in range(len(board)):
            for j in range(len(board[0])):
                board[i][j] = 1 if (board[i][j] > 0) else 0 
        return board
